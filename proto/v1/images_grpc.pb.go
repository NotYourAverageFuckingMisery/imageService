// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: images.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TransferImageServiceClient is the client API for TransferImageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransferImageServiceClient interface {
	Upload(ctx context.Context, opts ...grpc.CallOption) (TransferImageService_UploadClient, error)
	Download(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (TransferImageService_DownloadClient, error)
}

type transferImageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTransferImageServiceClient(cc grpc.ClientConnInterface) TransferImageServiceClient {
	return &transferImageServiceClient{cc}
}

func (c *transferImageServiceClient) Upload(ctx context.Context, opts ...grpc.CallOption) (TransferImageService_UploadClient, error) {
	stream, err := c.cc.NewStream(ctx, &TransferImageService_ServiceDesc.Streams[0], "/img.TransferImageService/Upload", opts...)
	if err != nil {
		return nil, err
	}
	x := &transferImageServiceUploadClient{stream}
	return x, nil
}

type TransferImageService_UploadClient interface {
	Send(*UploadRequest) error
	CloseAndRecv() (*emptypb.Empty, error)
	grpc.ClientStream
}

type transferImageServiceUploadClient struct {
	grpc.ClientStream
}

func (x *transferImageServiceUploadClient) Send(m *UploadRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *transferImageServiceUploadClient) CloseAndRecv() (*emptypb.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(emptypb.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *transferImageServiceClient) Download(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (TransferImageService_DownloadClient, error) {
	stream, err := c.cc.NewStream(ctx, &TransferImageService_ServiceDesc.Streams[1], "/img.TransferImageService/Download", opts...)
	if err != nil {
		return nil, err
	}
	x := &transferImageServiceDownloadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TransferImageService_DownloadClient interface {
	Recv() (*DownloadResponse, error)
	grpc.ClientStream
}

type transferImageServiceDownloadClient struct {
	grpc.ClientStream
}

func (x *transferImageServiceDownloadClient) Recv() (*DownloadResponse, error) {
	m := new(DownloadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TransferImageServiceServer is the server API for TransferImageService service.
// All implementations must embed UnimplementedTransferImageServiceServer
// for forward compatibility
type TransferImageServiceServer interface {
	Upload(TransferImageService_UploadServer) error
	Download(*DownloadRequest, TransferImageService_DownloadServer) error
	mustEmbedUnimplementedTransferImageServiceServer()
}

// UnimplementedTransferImageServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTransferImageServiceServer struct {
}

func (UnimplementedTransferImageServiceServer) Upload(TransferImageService_UploadServer) error {
	return status.Errorf(codes.Unimplemented, "method Upload not implemented")
}
func (UnimplementedTransferImageServiceServer) Download(*DownloadRequest, TransferImageService_DownloadServer) error {
	return status.Errorf(codes.Unimplemented, "method Download not implemented")
}
func (UnimplementedTransferImageServiceServer) mustEmbedUnimplementedTransferImageServiceServer() {}

// UnsafeTransferImageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransferImageServiceServer will
// result in compilation errors.
type UnsafeTransferImageServiceServer interface {
	mustEmbedUnimplementedTransferImageServiceServer()
}

func RegisterTransferImageServiceServer(s grpc.ServiceRegistrar, srv TransferImageServiceServer) {
	s.RegisterService(&TransferImageService_ServiceDesc, srv)
}

func _TransferImageService_Upload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TransferImageServiceServer).Upload(&transferImageServiceUploadServer{stream})
}

type TransferImageService_UploadServer interface {
	SendAndClose(*emptypb.Empty) error
	Recv() (*UploadRequest, error)
	grpc.ServerStream
}

type transferImageServiceUploadServer struct {
	grpc.ServerStream
}

func (x *transferImageServiceUploadServer) SendAndClose(m *emptypb.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *transferImageServiceUploadServer) Recv() (*UploadRequest, error) {
	m := new(UploadRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TransferImageService_Download_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TransferImageServiceServer).Download(m, &transferImageServiceDownloadServer{stream})
}

type TransferImageService_DownloadServer interface {
	Send(*DownloadResponse) error
	grpc.ServerStream
}

type transferImageServiceDownloadServer struct {
	grpc.ServerStream
}

func (x *transferImageServiceDownloadServer) Send(m *DownloadResponse) error {
	return x.ServerStream.SendMsg(m)
}

// TransferImageService_ServiceDesc is the grpc.ServiceDesc for TransferImageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransferImageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "img.TransferImageService",
	HandlerType: (*TransferImageServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Upload",
			Handler:       _TransferImageService_Upload_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Download",
			Handler:       _TransferImageService_Download_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "images.proto",
}

// ImageInfoServiceClient is the client API for ImageInfoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImageInfoServiceClient interface {
	GetImageList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (ImageInfoService_GetImageListClient, error)
}

type imageInfoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewImageInfoServiceClient(cc grpc.ClientConnInterface) ImageInfoServiceClient {
	return &imageInfoServiceClient{cc}
}

func (c *imageInfoServiceClient) GetImageList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (ImageInfoService_GetImageListClient, error) {
	stream, err := c.cc.NewStream(ctx, &ImageInfoService_ServiceDesc.Streams[0], "/img.ImageInfoService/GetImageList", opts...)
	if err != nil {
		return nil, err
	}
	x := &imageInfoServiceGetImageListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ImageInfoService_GetImageListClient interface {
	Recv() (*GetImageListResponse, error)
	grpc.ClientStream
}

type imageInfoServiceGetImageListClient struct {
	grpc.ClientStream
}

func (x *imageInfoServiceGetImageListClient) Recv() (*GetImageListResponse, error) {
	m := new(GetImageListResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ImageInfoServiceServer is the server API for ImageInfoService service.
// All implementations must embed UnimplementedImageInfoServiceServer
// for forward compatibility
type ImageInfoServiceServer interface {
	GetImageList(*emptypb.Empty, ImageInfoService_GetImageListServer) error
	mustEmbedUnimplementedImageInfoServiceServer()
}

// UnimplementedImageInfoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedImageInfoServiceServer struct {
}

func (UnimplementedImageInfoServiceServer) GetImageList(*emptypb.Empty, ImageInfoService_GetImageListServer) error {
	return status.Errorf(codes.Unimplemented, "method GetImageList not implemented")
}
func (UnimplementedImageInfoServiceServer) mustEmbedUnimplementedImageInfoServiceServer() {}

// UnsafeImageInfoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImageInfoServiceServer will
// result in compilation errors.
type UnsafeImageInfoServiceServer interface {
	mustEmbedUnimplementedImageInfoServiceServer()
}

func RegisterImageInfoServiceServer(s grpc.ServiceRegistrar, srv ImageInfoServiceServer) {
	s.RegisterService(&ImageInfoService_ServiceDesc, srv)
}

func _ImageInfoService_GetImageList_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ImageInfoServiceServer).GetImageList(m, &imageInfoServiceGetImageListServer{stream})
}

type ImageInfoService_GetImageListServer interface {
	Send(*GetImageListResponse) error
	grpc.ServerStream
}

type imageInfoServiceGetImageListServer struct {
	grpc.ServerStream
}

func (x *imageInfoServiceGetImageListServer) Send(m *GetImageListResponse) error {
	return x.ServerStream.SendMsg(m)
}

// ImageInfoService_ServiceDesc is the grpc.ServiceDesc for ImageInfoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ImageInfoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "img.ImageInfoService",
	HandlerType: (*ImageInfoServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetImageList",
			Handler:       _ImageInfoService_GetImageList_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "images.proto",
}
